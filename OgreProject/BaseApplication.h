/*
-----------------------------------------------------------------------------
Filename:    BaseApplication.h
-----------------------------------------------------------------------------

This source file is part of the
   ___                 __    __ _ _    _ 
  /___\__ _ _ __ ___  / / /\ \ (_) | _(_)
 //  // _` | '__/ _ \ \ \/  \/ / | |/ / |
/ \_// (_| | | |  __/  \  /\  /| |   <| |
\___/ \__, |_|  \___|   \/  \/ |_|_|\_\_|
      |___/                              
      Tutorial Framework
      http://www.ogre3d.org/tikiwiki/
-----------------------------------------------------------------------------
*/
#ifndef __BaseApplication_h_
#define __BaseApplication_h_
#include <vector>
#include <OgreCamera.h>
#include <OgreEntity.h>
#include <OgreLogManager.h>
#include <OgreRoot.h>
#include <OgreViewport.h>
#include <OgreSceneManager.h>
#include <OgreRenderWindow.h>
#include <OgreConfigFile.h>

#include <OISEvents.h>
#include <OISInputManager.h>
#include <OISKeyboard.h>
#include <OISMouse.h>

#include <SdkTrays.h>
#include <SdkCameraMan.h>

class BaseApplication : public Ogre::FrameListener, public Ogre::WindowEventListener, public OIS::KeyListener, public OIS::MouseListener, OgreBites::SdkTrayListener
{
public:
    BaseApplication(void);
    virtual ~BaseApplication(void);

    virtual void go(void);

protected:
    virtual bool setup();
    virtual bool configure(void);
    virtual void chooseSceneManager(void);
    virtual void createCamera(void);
    virtual void createFrameListener(void);
    virtual void createScene(void) = 0; // Override me!
    virtual void destroyScene(void);
    virtual void createViewports(void);
    virtual void setupResources(void);
    virtual void createResourceListener(void);
    virtual void loadResources(void);

    // Ogre::FrameListener
    virtual bool frameRenderingQueued(const Ogre::FrameEvent& evt);

    // OIS::KeyListener
    virtual bool keyPressed( const OIS::KeyEvent &arg );
    virtual bool keyReleased( const OIS::KeyEvent &arg );
    // OIS::MouseListener
    virtual bool mouseMoved( const OIS::MouseEvent &arg );
    virtual bool mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id );
    virtual bool mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id );
	
	virtual Ogre::Vector3 convert(Ogre::Vector3 pos);//convert 2d pos to 3d pos for ortho viewing.
	virtual Ogre::Vector3 convert_persp(Ogre::Vector3 pos);//convert 2d pos to 3d perspective pos.
	Ogre::Vector3 inverse_convert_persp(Ogre::Vector3 pos);
	void showBottomPanel();
	void resetBottomPanel();
	int getindex(float dist);
	void commonCode1();
    
	// Ogre::WindowEventListener
    //Adjust mouse clipping area
    virtual void windowResized(Ogre::RenderWindow* rw);
    //Unattach OIS before window shutdown (very important under Linux)
    virtual void windowClosed(Ogre::RenderWindow* rw);
	void BaseApplication::DestroyAllAttachedMovableObjects( Ogre::SceneNode* i_pSceneNode );
	void savepath(char *filename);
	void loadpath(char *filename,bool richa_path);//load richa's path or path generated by this application.

	//LOD Related Functions
	//void updateLod(bool bThreaded = true);
	//void clearLodQueue();
	bool GetLodLevel(Ogre::Real& reductionValue);
	void updateStaticLod();

    Ogre::Root *mRoot;
    Ogre::Camera* mCamera;
	Ogre::Camera* mCamera2;
    Ogre::SceneManager* mSceneMgr;
    Ogre::RenderWindow* mWindow;
    Ogre::String mResourcesCfg;
    Ogre::String mPluginsCfg;

	///LOD RELATED VARIABLES
	Ogre::SceneNode*     mChariotNode;
	Ogre::Vector3        mOldCamPos;
	Ogre::Light*         mCameraLight;
	bool                 mbLOD;
	bool                 mbLodThread;
	Ogre::SceneNode*     mLODSceneNode[5];
	Ogre::Entity*        mLODEntity[5];

    // OgreBites
    OgreBites::SdkTrayManager* mTrayMgr;
    OgreBites::SdkCameraMan* mCameraMan;       // basic camera controller
	OgreBites::SdkCameraMan* mCameraMan2;
    OgreBites::ParamsPanel* mDetailsPanel;     // sample details panel
    bool mCursorWasVisible;                    // was cursor visible before dialog appeared
    bool mShutDown;
	
	
	std::vector<Ogre::Vector3> clicked_points;
	Ogre::SimpleSpline *sp;//define spline using clicked points.
	std::vector<float> dists;//cumulative distance of a point from start.

	std::vector<bool> stopflag;//whether stop or not.
	std::vector<int> stopAtp;
	std::vector<bool> stopflagtemp;//whether stop or not.(used for rendering)
	std::vector<int> stopAtptemp;
	std::vector<bool> speedflag;//whether speed is given by user.
	std::vector<float> speedAtp;
	std::vector<bool> gazeflag;//whether gaze dir is given by user.
	std::vector<float> gazeAtp;

    //OIS Input devices
    OIS::InputManager* mInputManager;
    OIS::Mouse*    mMouse;
    OIS::Keyboard* mKeyboard;

	//overlays
	Ogre::OverlayManager *overlayManager;
    Ogre::Overlay *overlay;
	Ogre::OverlayContainer *panel;
	
	Ogre::SceneNode *camnode;
	Ogre::SceneNode *circleNode;//circle in top-view.
	int rclick_elemid;//patch selected id(used for changing gaze dir by mouse right click).
	Ogre::AxisAlignedBox b;//model's bounding box.
	
	bool walk;//flag to switch b/w stop and walk.
	float pathdist;//spline length calculated using 20 samples on spline.
	float disttrav;//current distance travelled on path.


	Ogre::Viewport* vp1;//top-view.
	Ogre::Vector3 winsize;//storing adjusted winsize of vp1.
	Ogre::Viewport* vp2;//perspective-view.

	bool if_M_Pressed;// to avoid errors in cases path is formed using M and I is pressed after that, ----------------Vishesh_change-----------------
	bool import;
	int totalselectedpoints;
	int lastselectedpointindex;

	int prev_index_for_serach;
	std::vector<int> indices;//used to store index to selected points when path is imported.
	int rclick_label;//used when imported path is used.
};

#endif // #ifndef __BaseApplication_h_
